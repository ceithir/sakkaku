{"version":3,"sources":["../webpack/bootstrap","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","features/probabilities/maths.js","features/probabilities/worker.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_arrayLikeToArray","arr","len","length","arr2","Array","_toConsumableArray","isArray","iter","iterator","from","minLen","toString","slice","constructor","test","TypeError","permutationsCount","list","distincts","forEach","factorial","values","reduce","acc","Error","pRDefault","Math","pow","pSDefault","pRCompromised","pSCompromised","permutations","options","maxCardinality","maxValue","storage","findPermutations","candidate","some","total","val","newCandidateA","newCandidateB","push","ringSkillPermutations","ring","skill","keptDiceCount","combs","result","comb","size","rec","filter","x","arrayUnique","map","a","sort","subsets","rings","skills","complementaryCombinations","threshold","fill","sameArray","b","array","sortedArray","duplicatesIndex","includes","j","matchCombOtherDiceAtZero","diceP","diceCount","combToP","addUpToTN","tn","max","reverse","exactSuccess","compromised","pR","pS","ringSkillCombinations","withLessDiceThanMax","rDice","sDice","fullCombs","withOnlyRingDice","subresult","min","cb","withOnlySkillDice","gruellingCases","gruellingCombinations","addToGruellingCombinations","fullRingComb","fullSkillComb","cumulativeSuccess","asyncCumulativeSuccess","params","postMessage","type"],"mappings":"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","file":"6e772cdc498044d45302.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/react/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","/**\n * Mathematical concepts:\n * https://en.wikipedia.org/wiki/Combination\n * https://en.wikipedia.org/wiki/Permutation\n */\n\n/**\n * Known issues:\n * - Probabilities were checked for consistency in the generic case against the empirical results from https://l5r-dice-sim.vercel.app/ so any bias from this one is also reflected there\n * - Nothing has been done to avoid rounding errors piling up\n * - The maths are done as if the dice exploded before being chosen to be kept\n */\n\nexport const permutationsCount = (list) => {\n  let distincts = {};\n  list.forEach((value) => {\n    if (distincts[value]) {\n      distincts[value] += 1;\n    } else {\n      distincts[value] = 1;\n    }\n  });\n\n  return (\n    factorial(list.length) /\n    Object.values(distincts).reduce((acc, value) => {\n      return acc * factorial(value);\n    }, 1)\n  );\n};\n\nconst factorial = (n) => {\n  if (n < 0) {\n    throw new Error(\"n must be >= 0\");\n  }\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/**\n * Chances to get _exactly_ n success out of a given ring die\n */\nexport const pRDefault = (n) => {\n  if (n === 0) {\n    return 1 / 2;\n  }\n\n  return Math.pow(1 / 6, n - 1) * (1 / 3 + (1 / 6) * (1 / 2));\n};\n\n/**\n * Chances to get _exactly_ n success out of a given skill die\n */\nexport const pSDefault = (n) => {\n  if (n === 0) {\n    return 5 / 12;\n  }\n\n  return Math.pow(1 / 6, n - 1) * (5 / 12 + (1 / 6) * (5 / 12));\n};\n\n/**\n * Chances to get _exactly_ n success out of a given ring die while compromised\n */\nexport const pRCompromised = (n) => {\n  if (n === 0) {\n    return 5 / 6;\n  }\n  if (n === 1) {\n    return 1 / 6;\n  }\n  return 0;\n};\n\n/**\n * Chances to get _exactly_ n success out of a given skill die while compromised\n */\nexport const pSCompromised = (n) => {\n  if (n === 0) {\n    return 2 / 3;\n  }\n  return Math.pow(1 / 12, n - 1) * (1 / 4 + (1 / 12) * (2 / 3));\n};\n\n/**\n * List all permutations of non-zero positive integers that sum up to n\n * Example:\n * n=4 -> [\n      [1, 1, 1, 1],\n      [1, 1, 2],\n      [1, 2, 1],\n      [1, 3],\n      [2, 1, 1],\n      [2, 2],\n      [3, 1],\n      [4],\n    ]\n */\nexport const permutations = (n, options = {}) => {\n  const { maxCardinality = null, maxValue = null } = options;\n\n  let storage = [];\n\n  const findPermutations = (candidate) => {\n    if (maxCardinality !== null && candidate.length > maxCardinality) {\n      return;\n    }\n    if (maxValue !== null && candidate.some((value) => value > maxValue)) {\n      return;\n    }\n\n    const total = candidate.reduce((acc, val) => acc + val, 0);\n    if (total < n) {\n      const newCandidateA = [...candidate, 1];\n      const newCandidateB = [...candidate];\n      newCandidateB[newCandidateB.length - 1] =\n        newCandidateB[newCandidateB.length - 1] + 1;\n      findPermutations(newCandidateA);\n      findPermutations(newCandidateB);\n    }\n    if (total === n) {\n      storage.push(candidate);\n    }\n  };\n\n  findPermutations([1]);\n  return storage;\n};\n\n/**\n * List all ways pick {size} dice out of a pool of {ring} ring dice and {skill} skill dice\n * Example:\n * ring=2, skill=3, size=3 -> [\n      { ring: 2, skill: 1 },\n      { ring: 1, skill: 2 },\n      { ring: 0, skill: 3 },\n    ]\n */\nexport const subsets = ({ ring, skill, size }) => {\n  if (size > ring.length + skill.length) {\n    throw new Error(\"Out of bounds\");\n  }\n  if (ring < 1) {\n    throw new Error(\"Not possible for a standard roll thus not implemented\");\n  }\n\n  let storage = [];\n  const rec = (candidate) => {\n    if (candidate.length < size) {\n      if (candidate.filter((x) => x === \"r\").length < ring) {\n        rec([...candidate, \"r\"]);\n      }\n      if (candidate.filter((x) => x === \"s\").length < skill) {\n        rec([...candidate, \"s\"]);\n      }\n    }\n    if (candidate.length === size) {\n      storage.push(candidate);\n    }\n  };\n  rec([]);\n\n  return arrayUnique(storage.map((a) => [...a].sort())).map((value) => {\n    const r = value.filter((x) => x === \"r\").length;\n    const s = value.filter((x) => x === \"s\").length;\n\n    return {\n      ring: r,\n      skill: s,\n    };\n  });\n};\n\n/**\n * List all permutations of {keptDiceCount} dice among a pool of {ring} ring dice plus {skill} skill dice summing up to n\n * Example:\n * ring=2, skill=3, n=5 -> [\n    { rings: [ 1, 4 ], skills: [] },\n    { rings: [ 1 ], skills: [ 4 ] },\n    { rings: [], skills: [ 1, 4 ] },\n    { rings: [ 2, 3 ], skills: [] },\n    { rings: [ 2 ], skills: [ 3 ] },\n    { rings: [], skills: [ 2, 3 ] },\n    { rings: [ 3, 2 ], skills: [] },\n    { rings: [ 3 ], skills: [ 2 ] },\n    { rings: [], skills: [ 3, 2 ] },\n    { rings: [ 4, 1 ], skills: [] },\n    { rings: [ 4 ], skills: [ 1 ] },\n    { rings: [], skills: [ 4, 1 ] },\n    { rings: [ 5 ], skills: [] },\n    { rings: [], skills: [ 5 ] }\n   ]\n */\nexport const ringSkillPermutations = ({\n  ring,\n  skill,\n  n,\n  keptDiceCount = ring,\n}) => {\n  const combs = permutations(n, { maxCardinality: keptDiceCount });\n\n  let result = [];\n  combs.forEach((comb) => {\n    const sets = subsets({ ring, skill, size: comb.length });\n    sets.forEach(({ ring: r, skill: s }) => {\n      let rings = new Array(r);\n      let skills = new Array(s);\n\n      for (let i = 0; i < r; i++) {\n        rings[i] = comb[i];\n      }\n      for (let i = 0; i < s; i++) {\n        skills[i] = comb[r + i];\n      }\n\n      result.push({ rings, skills });\n    });\n  });\n\n  return result;\n};\n\n/**\n * List all permutations of {keptDiceCount} dice among a pool of {ring} ring dice plus {skill} skill dice summing up to n\n * ring=2, skill=3, n=5 -> [\n      { rings: [1, 4], skills: [] },\n      { rings: [1], skills: [4] },\n      { rings: [], skills: [1, 4] },\n      { rings: [2, 3], skills: [] },\n      { rings: [2], skills: [3] },\n      { rings: [], skills: [2, 3] },\n      { rings: [3], skills: [2] },\n      { rings: [4], skills: [1] },\n      { rings: [5], skills: [] },\n      { rings: [], skills: [5] },\n    ]\n */\nexport const ringSkillCombinations = ({ ring, skill, n, keptDiceCount }) => {\n  const array = ringSkillPermutations({ ring, skill, n, keptDiceCount }).map(\n    ({ rings, skills }) => {\n      return { rings: rings.sort(), skills: skills.sort() };\n    }\n  );\n\n  let result = [];\n  let duplicatesIndex = [];\n  for (let i = 0; i < array.length; i++) {\n    if (duplicatesIndex.includes(i)) {\n      continue;\n    }\n    for (let j = i + 1; j < array.length; j++) {\n      if (\n        sameArray(array[i][\"rings\"], array[j][\"rings\"]) &&\n        sameArray(array[i][\"skills\"], array[j][\"skills\"])\n      ) {\n        duplicatesIndex.push(j);\n      }\n    }\n    result.push(array[i]);\n  }\n\n  return result;\n};\n\n/**\n * List all combinations between of {size} integers between 0 and {threshold}\n * threshold=2, size=2 -> [\n    [0, 0],\n    [0, 1],\n    [1, 1],\n    [0, 2],\n    [1, 2],\n    [2, 2],\n  ]\n */\nexport const complementaryCombinations = ({ threshold, size }) => {\n  if (size === 0) {\n    return [];\n  }\n\n  if (threshold === 0) {\n    return [new Array(size).fill(0)];\n  }\n\n  let result = [new Array(size).fill(0)];\n  for (let i = 1; i <= size * threshold; i++) {\n    arrayUnique(\n      permutations(i, { maxCardinality: size, maxValue: threshold })\n    ).forEach((comb) => {\n      result.push([...new Array(size - comb.length).fill(0), ...comb]);\n    });\n  }\n  return result;\n};\n\n/**\n * As the name suggests, list all possible permutations\n * Not used by the the algorithm, just there for testing/debugging\n */\nexport const bruteForcePermutations = ({ ring, skill, tn, options = {} }) => {\n  const { keptDiceCount = ring } = options;\n  let allCombs = [];\n\n  const base = tn + 1;\n  for (let i = 0; i < Math.pow(tn + 1, ring + skill); i++) {\n    let tmp = [];\n    let quotient = Math.floor(i / base);\n    let remainder = i % base;\n    tmp.push(remainder);\n\n    while (quotient > 0) {\n      const n = quotient;\n      quotient = Math.floor(n / base);\n      remainder = n % base;\n      tmp.push(remainder);\n    }\n    for (let j = tmp.length; j < ring + skill; j++) {\n      tmp.push(0);\n    }\n    allCombs.push(tmp.reverse());\n  }\n\n  return allCombs.filter(\n    (comb) =>\n      [...comb]\n        .sort()\n        .reverse()\n        .slice(0, keptDiceCount)\n        .reduce((acc, val) => acc + val, 0) === tn\n  );\n};\n\nconst bruteForceExact = ({ ring, skill, tn, options }) => {\n  return bruteForcePermutations({ ring, skill, tn, options }).reduce(\n    (acc, permutation) => {\n      return (\n        acc +\n        permutation.slice(0, ring).reduce((acc, n) => acc * pRDefault(n), 1) *\n          permutation.slice(ring).reduce((acc, n) => acc * pSDefault(n), 1)\n      );\n    },\n    0\n  );\n};\n\nexport const bruteForceChances = ({ ring, skill, tn, options = {} }) => {\n  let result = 1;\n\n  for (let i = 0; i < tn; i++) {\n    result -= bruteForceExact({ ring, skill, tn: i, options });\n  }\n\n  return result;\n};\n\nconst sameArray = (a, b) => {\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst arrayUnique = (array) => {\n  const sortedArray = [...array].map((a) => a.sort());\n\n  let result = [];\n  let duplicatesIndex = [];\n\n  for (let i = 0; i < sortedArray.length; i++) {\n    if (duplicatesIndex.includes(i)) {\n      continue;\n    }\n\n    for (let j = i + 1; j < array.length; j++) {\n      if (sameArray(sortedArray[i], sortedArray[j])) {\n        duplicatesIndex.push(j);\n      }\n    }\n\n    result.push(sortedArray[i]);\n  }\n\n  return result;\n};\n\nconst matchCombOtherDiceAtZero = ({ comb, diceP, diceCount }) => {\n  if (comb.length > diceCount) {\n    return 0;\n  }\n\n  let result = 1;\n  comb.forEach((x) => {\n    result *= diceP(x);\n  });\n  result *= Math.pow(diceP(0), diceCount - comb.length);\n  result *= permutationsCount([\n    ...comb,\n    ...new Array(diceCount - comb.length).fill(0),\n  ]);\n\n  return result;\n};\n\nconst combToP = (comb, diceP) => {\n  return comb.reduce((acc, x) => acc * diceP(x), 1);\n};\n\nconst addUpToTN = (comb, tn, options = {}) => {\n  const { max = null } = options;\n\n  if (max === null) {\n    return comb.reduce((acc, x) => acc + x, 0) >= tn;\n  }\n\n  return (\n    [...comb]\n      .sort()\n      .reverse()\n      .slice(0, max)\n      .reduce((acc, x) => acc + x, 0) >= tn\n  );\n};\n\n/**\n * Chances to _exactly_ match the TN out of a given roll assuming a \"always pick highest\" strategy\n *\n * General algorithm:\n * 1. List all combinations summing up to that TN\n * 2. Determine the probability of each happening\n * 3. Sum them all\n *\n * FIXME: With a high TN, a high number of dice rolled, and a low number of dice kept, performances are terrible\n */\nconst exactSuccess = ({ ring, skill, tn, options }) => {\n  const { compromised = false, keptDiceCount = ring } = options;\n  const pR = compromised ? pRCompromised : pRDefault;\n  const pS = compromised ? pSCompromised : pSDefault;\n\n  if (tn === 0) {\n    return Math.pow(pR(0), ring) * Math.pow(pS(0), skill);\n  }\n\n  const combs = ringSkillCombinations({ ring, skill, n: tn, keptDiceCount });\n\n  // Case: Any combination summing up to the TN with less dice than the max that can be kept\n  // All other dice must therefore be at zero or the total would be above TN\n  const withLessDiceThanMax = combs\n    .filter(\n      ({ rings: rDice, skills: sDice }) =>\n        rDice.length + sDice.length < keptDiceCount\n    )\n    .reduce((acc, { rings: rDice, skills: sDice }) => {\n      return (\n        acc +\n        matchCombOtherDiceAtZero({\n          comb: rDice,\n          diceP: pR,\n          diceCount: ring,\n        }) *\n          matchCombOtherDiceAtZero({\n            comb: sDice,\n            diceP: pS,\n            diceCount: skill,\n          })\n      );\n    }, 0);\n\n  const fullCombs = combs.filter(\n    ({ rings: rDice, skills: sDice }) =>\n      rDice.length + sDice.length === keptDiceCount\n  );\n\n  // Case: keptDiceCount ring dice add up exactly to TN\n  // Skill dice can have any value as long as it's equal or lower to the lowest ring die\n  const withOnlyRingDice = fullCombs\n    .filter(({ skills: sDice }) => sDice.length === 0) // <=> rDice.length === keptDiceCount\n    .reduce((acc, { rings: rDice }) => {\n      let subresult = 1;\n      subresult *= combToP(rDice, pR);\n      subresult *= permutationsCount(rDice);\n\n      if (skill > 0) {\n        subresult *= complementaryCombinations({\n          threshold: Math.min(...rDice),\n          size: skill,\n        }).reduce((acc, cb) => {\n          return acc + combToP(cb, pS) * permutationsCount(cb);\n        }, 0);\n      }\n\n      return acc + subresult;\n    }, 0);\n\n  // Case:\n  // 1. keptDiceCount skill dice exactly add up to TN\n  // 2. It's not possible to achieve the TN with solely ring dice (to avoid falling back into the previous case)\n  const withOnlySkillDice = fullCombs\n    .filter(({ rings: rDice }) => rDice.length === 0) // <=> sDice.length === keptDiceCount\n    .reduce((acc, { skills: sDice }) => {\n      let subresult = 1;\n      subresult *= complementaryCombinations({\n        threshold: Math.min(...sDice),\n        size: ring,\n      })\n        .filter((cb) => !addUpToTN(cb, tn))\n        .reduce((acc, cb) => {\n          return acc + combToP(cb, pR) * permutationsCount(cb);\n        }, 0);\n\n      subresult *= combToP(sDice, pS);\n      if (sDice.length === skill) {\n        subresult *= permutationsCount(sDice);\n      } else {\n        subresult *= complementaryCombinations({\n          threshold: Math.min(...sDice),\n          size: skill - sDice.length,\n        }).reduce((acc, cb) => {\n          return acc + combToP(cb, pS) * permutationsCount([...sDice, ...cb]);\n        }, 0);\n      }\n\n      return acc + subresult;\n    }, 0);\n\n  // Case: Achieving the TN _requires_ mixing both dice\n  const gruellingCases = fullCombs.filter(\n    ({ rings: rDice, skills: sDice }) => rDice.length > 0 && sDice.length > 0\n  );\n  // No more tricks there, we just compute the \"supposedly small\" list of all these combinations\n  let gruellingCombinations = [];\n  const addToGruellingCombinations = (comb) => {\n    if (\n      gruellingCombinations.some(\n        ({ rings, skills }) =>\n          sameArray([...rings].sort(), [...comb[\"rings\"]].sort()) &&\n          sameArray([...skills].sort(), [...comb[\"skills\"]].sort())\n      )\n    ) {\n      return;\n    }\n    gruellingCombinations.push(comb);\n  };\n  gruellingCases.forEach(({ rings: rDice, skills: sDice }) => {\n    const threshold = Math.min(...rDice, ...sDice);\n\n    const fullRingCombs =\n      ring - rDice.length > 0\n        ? complementaryCombinations({\n            threshold,\n            size: ring - rDice.length,\n          }).map((cb) => [...rDice, ...cb])\n        : [rDice];\n\n    fullRingCombs\n      .filter((fullRingComb) => {\n        return !addUpToTN(fullRingComb, tn);\n      })\n      .forEach((fullRingComb) => {\n        if (skill === sDice.length) {\n          return addToGruellingCombinations({\n            rings: fullRingComb,\n            skills: sDice,\n          });\n        }\n\n        complementaryCombinations({\n          threshold,\n          size: skill - sDice.length,\n        })\n          .map((cb) => [...sDice, ...cb])\n          .filter((fullSkillComb) => {\n            return !addUpToTN(fullSkillComb, tn, { max: keptDiceCount });\n          })\n          .forEach((fullSkillComb) => {\n            addToGruellingCombinations({\n              rings: fullRingComb,\n              skills: fullSkillComb,\n            });\n          });\n      });\n  });\n\n  const withBothRingAndSkillDice = gruellingCombinations.reduce(\n    (acc, { rings: fullRingComb, skills: fullSkillComb }) => {\n      return (\n        acc +\n        combToP(fullRingComb, pR) *\n          permutationsCount(fullRingComb) *\n          combToP(fullSkillComb, pS) *\n          permutationsCount(fullSkillComb)\n      );\n    },\n    0\n  );\n\n  return (\n    withLessDiceThanMax +\n    withOnlyRingDice +\n    withOnlySkillDice +\n    withBothRingAndSkillDice\n  );\n};\n\n/**\n * Chances to _at least_ match the tn out of a given roll\n */\nexport const cumulativeSuccess = ({ ring, skill, tn, options = {} }) => {\n  const { keptDiceCount = ring } = options;\n\n  if (keptDiceCount <= 0) {\n    return tn <= 0 ? 1 : 0;\n  }\n  if (keptDiceCount > ring + skill) {\n    throw new Error(\"Cannot keep more dice than available\");\n  }\n  if (keptDiceCount < ring) {\n    throw new Error(\"Not implemented\");\n  }\n\n  let result = 1;\n  for (let i = 0; i < tn; i++) {\n    result -= exactSuccess({ ring, skill, tn: i, options });\n  }\n  return result;\n};\n","import { cumulativeSuccess } from \"./maths\";\n\nexport const asyncCumulativeSuccess = (params) => {\n  postMessage({ type: \"custom\", params, result: cumulativeSuccess(params) });\n};\n"],"sourceRoot":""}