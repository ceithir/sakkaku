{"version":3,"file":"c247fb8e13969ddae1ea.worker.js","mappings":"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","sources":["../webpack/bootstrap","../webpack/runtime/define property getters","../webpack/runtime/hasOwnProperty shorthand","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/l5r-ffg-probabilities/maths.js","features/probabilities/worker.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","/**\n * Mathematical concepts:\n * https://en.wikipedia.org/wiki/Combination\n * https://en.wikipedia.org/wiki/Permutation\n * https://en.wikipedia.org/wiki/Geometric_progression\n */\n\n/**\n * Known issues:\n * - Probabilities were checked for consistency in the generic case against the empirical results from https://l5r-dice-sim.vercel.app/ so any bias from this one is also reflected there\n * - Nothing has been done to avoid rounding errors piling up\n * - The maths are done as if the dice exploded before being chosen to be kept\n */\n\nexport const permutationsCount = (list) => {\n  let distincts = {};\n  list.forEach((value) => {\n    if (distincts[value]) {\n      distincts[value] += 1;\n    } else {\n      distincts[value] = 1;\n    }\n  });\n\n  return (\n    factorial(list.length) /\n    Object.values(distincts).reduce((acc, value) => {\n      return acc * factorial(value);\n    }, 1)\n  );\n};\n\nconst factorial = (n) => {\n  if (n < 0) {\n    throw new Error(\"n must be >= 0\");\n  }\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/**\n * Chances to get _exactly_ n success out of a given ring die\n */\nexport const pRDefault = (n) => {\n  if (n === 0) {\n    return 1 / 2;\n  }\n\n  return Math.pow(1 / 6, n - 1) * (1 / 3 + (1 / 6) * (1 / 2));\n};\n\n/**\n * Chances to get _exactly_ n success out of a given skill die\n */\nexport const pSDefault = (n) => {\n  if (n === 0) {\n    return 5 / 12;\n  }\n\n  return Math.pow(1 / 6, n - 1) * (5 / 12 + (1 / 6) * (5 / 12));\n};\n\n/**\n * Chances to get _exactly_ n success out of a given ring die while compromised\n */\nexport const pRCompromised = (n) => {\n  if (n === 0) {\n    return 5 / 6;\n  }\n  if (n === 1) {\n    return 1 / 6;\n  }\n  return 0;\n};\n\n/**\n * Chances to get _exactly_ n success out of a given skill die while compromised\n */\nexport const pSCompromised = (n) => {\n  if (n === 0) {\n    return 2 / 3;\n  }\n  return Math.pow(1 / 12, n - 1) * (1 / 4 + (1 / 12) * (2 / 3));\n};\n\n/**\n * List all permutations of non-zero positive integers that sum up to n\n * Example:\n * n=4 -> [\n      [1, 1, 1, 1],\n      [1, 1, 2],\n      [1, 2, 1],\n      [1, 3],\n      [2, 1, 1],\n      [2, 2],\n      [3, 1],\n      [4],\n    ]\n */\nexport const permutations = (n, options = {}) => {\n  const { maxCardinality = null, maxValue = null } = options;\n\n  let storage = [];\n\n  const findPermutations = (candidate) => {\n    if (maxCardinality !== null && candidate.length > maxCardinality) {\n      return;\n    }\n    if (maxValue !== null && candidate.some((value) => value > maxValue)) {\n      return;\n    }\n\n    const total = candidate.reduce((acc, val) => acc + val, 0);\n    if (total < n) {\n      const newCandidateA = [...candidate, 1];\n      const newCandidateB = [...candidate];\n      newCandidateB[newCandidateB.length - 1] =\n        newCandidateB[newCandidateB.length - 1] + 1;\n      findPermutations(newCandidateA);\n      findPermutations(newCandidateB);\n    }\n    if (total === n) {\n      storage.push(candidate);\n    }\n  };\n\n  findPermutations([1]);\n  return storage;\n};\n\n/**\n * List all ways pick {size} dice out of a pool of {ring} ring dice and {skill} skill dice\n * Example:\n * ring=2, skill=3, size=3 -> [\n      { ring: 2, skill: 1 },\n      { ring: 1, skill: 2 },\n      { ring: 0, skill: 3 },\n    ]\n */\nexport const subsets = ({ ring, skill, size }) => {\n  if (size > ring.length + skill.length) {\n    throw new Error(\"Out of bounds\");\n  }\n  if (ring < 1) {\n    throw new Error(\"Not possible for a standard roll thus not implemented\");\n  }\n\n  let storage = [];\n  const rec = (candidate) => {\n    if (candidate.length < size) {\n      if (candidate.filter((x) => x === \"r\").length < ring) {\n        rec([...candidate, \"r\"]);\n      }\n      if (candidate.filter((x) => x === \"s\").length < skill) {\n        rec([...candidate, \"s\"]);\n      }\n    }\n    if (candidate.length === size) {\n      storage.push(candidate);\n    }\n  };\n  rec([]);\n\n  return arrayUnique(storage.map((a) => [...a].sort())).map((value) => {\n    const r = value.filter((x) => x === \"r\").length;\n    const s = value.filter((x) => x === \"s\").length;\n\n    return {\n      ring: r,\n      skill: s,\n    };\n  });\n};\n\n/**\n * List all permutations of {keptDiceCount} dice among a pool of {ring} ring dice plus {skill} skill dice summing up to n\n * Example:\n * ring=2, skill=3, n=5 -> [\n    { rings: [ 1, 4 ], skills: [] },\n    { rings: [ 1 ], skills: [ 4 ] },\n    { rings: [], skills: [ 1, 4 ] },\n    { rings: [ 2, 3 ], skills: [] },\n    { rings: [ 2 ], skills: [ 3 ] },\n    { rings: [], skills: [ 2, 3 ] },\n    { rings: [ 3, 2 ], skills: [] },\n    { rings: [ 3 ], skills: [ 2 ] },\n    { rings: [], skills: [ 3, 2 ] },\n    { rings: [ 4, 1 ], skills: [] },\n    { rings: [ 4 ], skills: [ 1 ] },\n    { rings: [], skills: [ 4, 1 ] },\n    { rings: [ 5 ], skills: [] },\n    { rings: [], skills: [ 5 ] }\n   ]\n */\nexport const ringSkillPermutations = ({\n  ring,\n  skill,\n  n,\n  keptDiceCount = ring,\n}) => {\n  const combs = permutations(n, { maxCardinality: keptDiceCount });\n\n  let result = [];\n  combs.forEach((comb) => {\n    const sets = subsets({ ring, skill, size: comb.length });\n    sets.forEach(({ ring: r, skill: s }) => {\n      let rings = new Array(r);\n      let skills = new Array(s);\n\n      for (let i = 0; i < r; i++) {\n        rings[i] = comb[i];\n      }\n      for (let i = 0; i < s; i++) {\n        skills[i] = comb[r + i];\n      }\n\n      result.push({ rings, skills });\n    });\n  });\n\n  return result;\n};\n\n/**\n * List all permutations of {keptDiceCount} dice among a pool of {ring} ring dice plus {skill} skill dice summing up to n\n * ring=2, skill=3, n=5 -> [\n      { rings: [1, 4], skills: [] },\n      { rings: [1], skills: [4] },\n      { rings: [], skills: [1, 4] },\n      { rings: [2, 3], skills: [] },\n      { rings: [2], skills: [3] },\n      { rings: [], skills: [2, 3] },\n      { rings: [3], skills: [2] },\n      { rings: [4], skills: [1] },\n      { rings: [5], skills: [] },\n      { rings: [], skills: [5] },\n    ]\n */\nexport const ringSkillCombinations = ({ ring, skill, n, keptDiceCount }) => {\n  const array = ringSkillPermutations({ ring, skill, n, keptDiceCount }).map(\n    ({ rings, skills }) => {\n      return { rings: rings.sort(), skills: skills.sort() };\n    }\n  );\n\n  let result = [];\n  let duplicatesIndex = [];\n  for (let i = 0; i < array.length; i++) {\n    if (duplicatesIndex.includes(i)) {\n      continue;\n    }\n    for (let j = i + 1; j < array.length; j++) {\n      if (\n        sameArray(array[i][\"rings\"], array[j][\"rings\"]) &&\n        sameArray(array[i][\"skills\"], array[j][\"skills\"])\n      ) {\n        duplicatesIndex.push(j);\n      }\n    }\n    result.push(array[i]);\n  }\n\n  return result;\n};\n\n/**\n * List all combinations between of {size} integers between 0 and {threshold}\n * threshold=2, size=2 -> [\n    [0, 0],\n    [0, 1],\n    [0, 2],\n    [1, 1],\n    [1, 2],\n    [2, 2],\n  ]\n *\n * See discussion on algorithm here: https://stackoverflow.com/questions/127704/algorithm-to-return-all-combinations-of-k-elements-from-n\n *\n * Note: size=0 will return [[]]\n */\nexport const complementaryCombinations = ({ threshold, size }) => {\n  let resultPerSize = {};\n\n  resultPerSize[1] = [];\n  for (let i = 1; i <= threshold; i++) {\n    resultPerSize[1].push([i]);\n  }\n\n  for (let s = 2; s <= size; s++) {\n    resultPerSize[s] = [];\n    for (let i = 1; i <= threshold; i++) {\n      for (let j = 0; j < resultPerSize[s - 1].length; j++) {\n        if (resultPerSize[s - 1][j][0] < i) {\n          continue;\n        }\n        resultPerSize[s].push([i, ...resultPerSize[s - 1][j]]);\n      }\n    }\n  }\n\n  let result = [new Array(size).fill(0)];\n  for (let i = 1; i <= size; i++) {\n    resultPerSize[i].forEach((r) => {\n      result.push([...new Array(size - i).fill(0), ...r]);\n    });\n  }\n\n  return result;\n};\n\n/**\n * As the name suggests, list all possible permutations\n * Not used by the the algorithm, just there for testing/debugging\n */\nexport const bruteForcePermutations = ({ ring, skill, tn, options = {} }) => {\n  const { keptDiceCount = ring } = options;\n  let allCombs = [];\n\n  const base = tn + 1;\n  for (let i = 0; i < Math.pow(tn + 1, ring + skill); i++) {\n    let tmp = [];\n    let quotient = Math.floor(i / base);\n    let remainder = i % base;\n    tmp.push(remainder);\n\n    while (quotient > 0) {\n      const n = quotient;\n      quotient = Math.floor(n / base);\n      remainder = n % base;\n      tmp.push(remainder);\n    }\n    for (let j = tmp.length; j < ring + skill; j++) {\n      tmp.push(0);\n    }\n    allCombs.push(tmp.reverse());\n  }\n\n  return allCombs.filter(\n    (comb) =>\n      [...comb]\n        .sort()\n        .reverse()\n        .slice(0, keptDiceCount)\n        .reduce((acc, val) => acc + val, 0) === tn\n  );\n};\n\nconst bruteForceExact = ({ ring, skill, tn, options }) => {\n  return bruteForcePermutations({ ring, skill, tn, options }).reduce(\n    (acc, permutation) => {\n      return (\n        acc +\n        permutation.slice(0, ring).reduce((acc, n) => acc * pRDefault(n), 1) *\n          permutation.slice(ring).reduce((acc, n) => acc * pSDefault(n), 1)\n      );\n    },\n    0\n  );\n};\n\nexport const bruteForceChances = ({ ring, skill, tn, options = {} }) => {\n  let result = 1;\n\n  for (let i = 0; i < tn; i++) {\n    result -= bruteForceExact({ ring, skill, tn: i, options });\n  }\n\n  return result;\n};\n\nconst sameArray = (a, b) => {\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst arrayUnique = (array) => {\n  const sortedArray = [...array].map((a) => a.sort());\n\n  let result = [];\n  let duplicatesIndex = [];\n\n  for (let i = 0; i < sortedArray.length; i++) {\n    if (duplicatesIndex.includes(i)) {\n      continue;\n    }\n\n    for (let j = i + 1; j < array.length; j++) {\n      if (sameArray(sortedArray[i], sortedArray[j])) {\n        duplicatesIndex.push(j);\n      }\n    }\n\n    result.push(sortedArray[i]);\n  }\n\n  return result;\n};\n\nconst matchCombOtherDiceAtZero = ({ comb, diceP, diceCount }) => {\n  if (comb.length > diceCount) {\n    return 0;\n  }\n\n  let result = 1;\n  comb.forEach((x) => {\n    result *= diceP(x);\n  });\n  result *= Math.pow(diceP(0), diceCount - comb.length);\n  result *= permutationsCount([\n    ...comb,\n    ...new Array(diceCount - comb.length).fill(0),\n  ]);\n\n  return result;\n};\n\nconst combToP = (comb, diceP) => {\n  return comb.reduce((acc, x) => acc * diceP(x), 1);\n};\n\nconst addUpToTN = (comb, tn, options = {}) => {\n  const { max = null } = options;\n\n  if (max === null) {\n    return comb.reduce((acc, x) => acc + x, 0) >= tn;\n  }\n\n  return (\n    [...comb]\n      .sort()\n      .reverse()\n      .slice(0, max)\n      .reduce((acc, x) => acc + x, 0) >= tn\n  );\n};\n\n/**\n * Chances to _exactly_ match the TN out of a given roll assuming a \"always pick highest\" strategy\n *\n * General algorithm:\n * 1. List all combinations summing up to that TN\n * 2. Determine the probability of each happening\n * 3. Sum them all\n *\n * FIXME: With a high TN, a high number of dice rolled, and a low number of dice kept, performances are mediocre\n */\nconst exactSuccess = ({ ring, skill, tn, options }) => {\n  const { compromised = false, keptDiceCount = ring } = options;\n  const pR = compromised ? pRCompromised : pRDefault;\n  const pS = compromised ? pSCompromised : pSDefault;\n\n  if (tn === 0) {\n    return Math.pow(pR(0), ring) * Math.pow(pS(0), skill);\n  }\n\n  const combs = ringSkillCombinations({ ring, skill, n: tn, keptDiceCount });\n  // Case: Any combination summing up to the TN with less dice than the max that can be kept\n  // All other dice must therefore be at zero or the total would be above TN\n  const withLessDiceThanMax = combs\n    .filter(\n      ({ rings: rDice, skills: sDice }) =>\n        rDice.length + sDice.length < keptDiceCount\n    )\n    .reduce((acc, { rings: rDice, skills: sDice }) => {\n      return (\n        acc +\n        matchCombOtherDiceAtZero({\n          comb: rDice,\n          diceP: pR,\n          diceCount: ring,\n        }) *\n          matchCombOtherDiceAtZero({\n            comb: sDice,\n            diceP: pS,\n            diceCount: skill,\n          })\n      );\n    }, 0);\n\n  const fullCombs = combs.filter(\n    ({ rings: rDice, skills: sDice }) =>\n      rDice.length + sDice.length === keptDiceCount\n  );\n\n  // Case: keptDiceCount ring dice add up exactly to TN\n  // Skill dice can have any value as long as it's equal or lower to the lowest ring die\n  const withOnlyRingDice = fullCombs\n    .filter(({ skills: sDice }) => sDice.length === 0) // <=> rDice.length === keptDiceCount\n    .reduce((acc, { rings: rDice }) => {\n      let subresult = 1;\n      subresult *= combToP(rDice, pR);\n      subresult *= permutationsCount(rDice);\n\n      subresult *= complementaryCombinations({\n        threshold: Math.min(...rDice),\n        size: skill,\n      }).reduce((acc, cb) => {\n        return acc + combToP(cb, pS) * permutationsCount(cb);\n      }, 0);\n\n      return acc + subresult;\n    }, 0);\n\n  // Case:\n  // 1. keptDiceCount skill dice exactly add up to TN\n  // 2. It's not possible to achieve the TN with solely ring dice (to avoid falling back into the previous case)\n  const withOnlySkillDice = fullCombs\n    .filter(({ rings: rDice }) => rDice.length === 0) // <=> sDice.length === keptDiceCount\n    .reduce((acc, { skills: sDice }) => {\n      let subresult = 1;\n      subresult *= complementaryCombinations({\n        threshold: Math.min(...sDice),\n        size: ring,\n      })\n        .filter((cb) => !addUpToTN(cb, tn))\n        .reduce((acc, cb) => {\n          return acc + combToP(cb, pR) * permutationsCount(cb);\n        }, 0);\n\n      subresult *= combToP(sDice, pS);\n      subresult *= complementaryCombinations({\n        threshold: Math.min(...sDice),\n        size: skill - sDice.length,\n      }).reduce((acc, cb) => {\n        return acc + combToP(cb, pS) * permutationsCount([...sDice, ...cb]);\n      }, 0);\n\n      return acc + subresult;\n    }, 0);\n\n  // Case: Achieving the TN _requires_ mixing both dice\n  const gruellingCases = fullCombs.filter(\n    ({ rings: rDice, skills: sDice }) => rDice.length > 0 && sDice.length > 0\n  );\n  // No more tricks there, we just compute the \"supposedly small\" list of all these combinations\n  let gruellingCombinations = [];\n  const addToGruellingCombinations = (comb) => {\n    if (\n      gruellingCombinations.some(\n        ({ rings, skills }) =>\n          sameArray([...rings].sort(), [...comb[\"rings\"]].sort()) &&\n          sameArray([...skills].sort(), [...comb[\"skills\"]].sort())\n      )\n    ) {\n      return;\n    }\n    gruellingCombinations.push(comb);\n  };\n  gruellingCases.forEach(({ rings: rDice, skills: sDice }) => {\n    const threshold = Math.min(...rDice, ...sDice);\n\n    const fullRingCombs = complementaryCombinations({\n      threshold,\n      size: ring - rDice.length,\n    }).map((cb) => [...rDice, ...cb]);\n\n    fullRingCombs\n      .filter((fullRingComb) => {\n        return !addUpToTN(fullRingComb, tn);\n      })\n      .forEach((fullRingComb) => {\n        if (skill === sDice.length) {\n          return addToGruellingCombinations({\n            rings: fullRingComb,\n            skills: sDice,\n          });\n        }\n\n        complementaryCombinations({\n          threshold,\n          size: skill - sDice.length,\n        })\n          .map((cb) => [...sDice, ...cb])\n          .filter((fullSkillComb) => {\n            return !addUpToTN(fullSkillComb, tn, { max: keptDiceCount });\n          })\n          .forEach((fullSkillComb) => {\n            addToGruellingCombinations({\n              rings: fullRingComb,\n              skills: fullSkillComb,\n            });\n          });\n      });\n  });\n\n  const withBothRingAndSkillDice = gruellingCombinations.reduce(\n    (acc, { rings: fullRingComb, skills: fullSkillComb }) => {\n      return (\n        acc +\n        combToP(fullRingComb, pR) *\n          permutationsCount(fullRingComb) *\n          combToP(fullSkillComb, pS) *\n          permutationsCount(fullSkillComb)\n      );\n    },\n    0\n  );\n\n  return (\n    withLessDiceThanMax +\n    withOnlyRingDice +\n    withOnlySkillDice +\n    withBothRingAndSkillDice\n  );\n};\n\n/**\n * Chances to _at least_ match the tn out of a given roll\n */\nexport const cumulativeSuccess = ({ ring, skill, tn, options = {} }) => {\n  const { keptDiceCount = ring } = options;\n\n  if (keptDiceCount <= 0) {\n    return tn <= 0 ? 1 : 0;\n  }\n  if (keptDiceCount > ring + skill) {\n    throw new Error(\"Cannot keep more dice than available\");\n  }\n  if (keptDiceCount < ring) {\n    throw new Error(\"Not implemented\");\n  }\n\n  let result = 1;\n  for (let i = 0; i < tn; i++) {\n    result -= exactSuccess({ ring, skill, tn: i, options });\n  }\n  return result;\n};\n\n/**\n * Changes to get _exactly_ {n} success and exactly {opp} on a given ring die\n */\nconst pRExactDefault = ({ n, opp }) => {\n  if (opp > 1) {\n    return 0;\n  }\n\n  if (n === 0) {\n    return opp === 1 ? 1 / 3 : 1 / 6;\n  }\n\n  if (opp === 0) {\n    return Math.pow(1 / 6, n - 1) * (1 / 3 + (1 / 6) * (1 / 6));\n  }\n\n  return Math.pow(1 / 6, n) * (1 / 3);\n};\n\n/**\n * Chance to end on an opportunity (regardless of the number of success) on a given ring die\n * I.e. the result of the infinite geometric series 1/3+(1/6)*1/3+(1/6)^2*1/3...\n */\nconst pROppDefault = () => {\n  return 2 / 5;\n};\n\n/**\n * Changes to get _at least_ {n} success and exactly {opp} on a given ring die\n */\nconst pRAtLeastDefault = ({ n, opp }) => {\n  if (opp > 1) {\n    return 0;\n  }\n\n  if (opp === 1) {\n    return Math.pow(1 / 6, n) * pROppDefault();\n  }\n\n  // opp === 0\n\n  if (n === 0) {\n    return 1 - pROppDefault();\n  }\n\n  return Math.pow(1 / 6, n - 1) * (1 / 3 + (1 / 6) * (1 - pROppDefault()));\n};\n\nconst pRExactCompromised = ({ n, opp }) => {\n  if (opp === 0 && n === 0) {\n    return 2 / 3;\n  }\n\n  if (opp === 1 && n === 0) {\n    return 1 / 6;\n  }\n\n  if (opp === 0 && n === 1) {\n    return 1 / 6;\n  }\n\n  return 0;\n};\n\nconst pRAtLeastCompromised = ({ n, opp }) => {\n  if (opp === 0 && n === 0) {\n    return 5 / 6;\n  }\n\n  if (opp === 1 && n === 0) {\n    return 1 / 6;\n  }\n\n  if (opp === 0 && n === 1) {\n    return 1 / 6;\n  }\n\n  return 0;\n};\n\n/**\n * Changes to get _exactly_ {n} success and exactly {opp} on a given skill die\n */\nconst pSExactDefault = ({ n, opp }) => {\n  if (opp > 1) {\n    return 0;\n  }\n\n  if (n === 0) {\n    return opp === 1 ? 1 / 4 : 1 / 6;\n  }\n\n  if (opp === 0) {\n    return Math.pow(1 / 6, n - 1) * (1 / 3 + (1 / 6) * (1 / 6));\n  }\n\n  return Math.pow(1 / 6, n - 1) * (1 / 12 + (1 / 6) * (1 / 4));\n};\n\n/**\n * Chance to end on an opportunity (regardless of the number of success) on a given skill die\n * I.e. the result of the infinite geometric series 1/3+(1/6)*1/3+(1/6)^2*1/3...\n */\nconst pSOppDefault = () => {\n  return 2 / 5;\n};\n\n/**\n * Changes to get _at least_ {n} success and exactly {opp} on a given skill die\n */\nconst pSAtLeastDefault = ({ n, opp }) => {\n  if (opp > 1) {\n    return 0;\n  }\n\n  if (opp === 1) {\n    return Math.pow(1 / 6, n - 1) * (1 / 12 + (1 / 6) * pSOppDefault());\n  }\n\n  // opp === 0\n\n  if (n === 0) {\n    return 1 - pROppDefault();\n  }\n\n  return Math.pow(1 / 6, n - 1) * (1 / 3 + (1 / 6) * (1 - pSOppDefault()));\n};\n\nconst pSExactCompromised = ({ n, opp }) => {\n  if (opp > 1) {\n    return 0;\n  }\n\n  if (n === 0) {\n    return opp === 1 ? 1 / 4 : 1 / 6;\n  }\n\n  if (opp === 0) {\n    return Math.pow(1 / 12, n - 1) * (1 / 6 + (1 / 12) * (5 / 12));\n  }\n\n  return Math.pow(1 / 12, n - 1) * (1 / 12 + (1 / 12) * (1 / 4));\n};\n\n/**\n * (1/3)+(1/12)*(1/3)+(1/12)^2*(1/3)...\n */\nconst pSOppCompromised = () => {\n  return 4 / 11;\n};\n\nconst pSAtLeastCompromised = ({ n, opp }) => {\n  if (opp > 1) {\n    return 0;\n  }\n\n  if (opp === 1) {\n    return Math.pow(1 / 12, n - 1) * (1 / 12 + (1 / 12) * pSOppCompromised());\n  }\n\n  // opp === 0\n\n  if (n === 0) {\n    return 1 - pSOppCompromised();\n  }\n\n  return (\n    Math.pow(1 / 12, n - 1) * (1 / 6 + (1 / 12) * (1 - pSOppCompromised()))\n  );\n};\n\nconst zeroOnePermutations = ({ totalDiceCount, min, max }) => {\n  let storage = [];\n\n  const findPermutations = (candidate) => {\n    if (candidate.length > totalDiceCount) {\n      return;\n    }\n    if (candidate.some((value) => value > 1)) {\n      return;\n    }\n    if (candidate.length === totalDiceCount) {\n      const total = candidate.reduce((acc, val) => acc + val, 0);\n      if (total >= min && (!max || total <= max)) {\n        storage.push(candidate);\n      }\n    }\n\n    const newCandidateA = [...candidate, 0];\n    const newCandidateB = [...candidate];\n    newCandidateB[newCandidateB.length - 1] =\n      newCandidateB[newCandidateB.length - 1] + 1;\n    findPermutations(newCandidateA);\n    findPermutations(newCandidateB);\n  };\n\n  findPermutations([0]);\n  return storage;\n};\n\nconst sameSuccessOppComb = (combA, combB) => {\n  if (combA.length !== combB.length) {\n    return false;\n  }\n\n  return combA.every(({ success, opportunity }, i) => {\n    return (\n      combB[i][\"success\"] === success && combB[i][\"opportunity\"] === opportunity\n    );\n  });\n};\n\nconst sorter = (\n  { success: a1, opportunity: b1 },\n  { success: a2, opportunity: b2 }\n) => {\n  return a2 - a1 || b2 - b1;\n};\n\nconst coeff = (cb) =>\n  permutationsCount(\n    cb.map(({ success, opportunity }) => {\n      return `${success}-${opportunity}`;\n    })\n  );\n\n// FIXME More or less a brute force algorithm with abysmal complexity\nconst successOppCombinations = ({ ring, skill, tn, keptDiceCount, opp }) => {\n  const masks = zeroOnePermutations({\n    totalDiceCount: ring + skill,\n    min: keptDiceCount,\n    max: keptDiceCount,\n  });\n\n  const baseCombs = (size) => {\n    if (size === 0) {\n      return [[]];\n    }\n\n    let combs = [];\n\n    const oppPerms = zeroOnePermutations({\n      totalDiceCount: size,\n      min: 0,\n    });\n\n    complementaryCombinations({\n      threshold: tn,\n      size,\n    }).forEach((cb) => {\n      oppPerms.forEach((perm) => {\n        let crossedCb = new Array(size);\n        for (let i = 0; i < size; i++) {\n          crossedCb[i] = { success: cb[i], opportunity: perm[i] };\n        }\n        crossedCb.sort(sorter);\n        if (\n          combs.some((existingCb) => {\n            return sameSuccessOppComb(existingCb, crossedCb);\n          })\n        ) {\n          return;\n        }\n        combs.push(crossedCb);\n      });\n    });\n\n    return combs;\n  };\n\n  const ringCombs = baseCombs(ring);\n  const skillCombs = baseCombs(skill);\n\n  let combs = [];\n\n  ringCombs.forEach((ringComb) => {\n    skillCombs.forEach((skillComb) => {\n      const fullComb = [...ringComb, ...skillComb];\n\n      for (let i = 0; i < masks.length; i++) {\n        const mask = masks[i];\n\n        const totalSuccess = fullComb.reduce(\n          (acc, { success }, index) => acc + success * mask[index],\n          0\n        );\n        if (totalSuccess < tn) {\n          continue;\n        }\n        const totalOpp = fullComb.reduce(\n          (acc, { opportunity }, index) => acc + opportunity * mask[index],\n          0\n        );\n        if (totalOpp < opp) {\n          continue;\n        }\n        combs.push({ ringDice: ringComb, skillDice: skillComb });\n        break;\n      }\n    });\n  });\n\n  return combs;\n};\n\nexport const chances = ({ ring, skill, tn, opp = 0, options = {} }) => {\n  if (opp === 0) {\n    return cumulativeSuccess({ ring, skill, tn, options });\n  }\n\n  const { compromised = false, keptDiceCount = ring } = options;\n\n  if (opp > keptDiceCount) {\n    return 0;\n  }\n\n  const pRAtLeast = compromised ? pRAtLeastCompromised : pRAtLeastDefault;\n  const pRExact = compromised ? pRExactCompromised : pRExactDefault;\n  const pSAtLeast = compromised ? pSAtLeastCompromised : pSAtLeastDefault;\n  const pSExact = compromised ? pSExactCompromised : pSExactDefault;\n\n  return successOppCombinations({\n    ring,\n    skill,\n    tn,\n    keptDiceCount,\n    opp,\n  }).reduce((acc, { ringDice, skillDice }) => {\n    return (\n      acc +\n      coeff(ringDice) *\n        ringDice.reduce((acc, { success, opportunity }) => {\n          const current = () => {\n            if (success === tn) {\n              return pRAtLeast({ n: success, opp: opportunity });\n            }\n\n            return pRExact({ n: success, opp: opportunity });\n          };\n          return acc * current();\n        }, 1) *\n        coeff(skillDice) *\n        skillDice.reduce((acc, { success, opportunity }) => {\n          const current = () => {\n            if (success === tn) {\n              return pSAtLeast({ n: success, opp: opportunity });\n            }\n\n            return pSExact({ n: success, opp: opportunity });\n          };\n          return acc * current();\n        }, 1)\n    );\n  }, 0);\n};\n","import { chances } from \"l5r-ffg-probabilities\";\n\nexport const asyncChances = (params) => {\n  postMessage({ type: \"custom\", params, result: chances(params) });\n};\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","_arrayLikeToArray","arr","len","length","i","arr2","Array","isArray","iter","Symbol","iterator","from","minLen","n","toString","slice","constructor","name","test","TypeError","permutationsCount","list","distincts","forEach","value","factorial","values","reduce","acc","Error","pRDefault","Math","pow","pSDefault","pRCompromised","pSCompromised","ringSkillPermutations","_ref2","ring","skill","_ref2$keptDiceCount","keptDiceCount","combs","options","arguments","undefined","_options$maxCardinali","maxCardinality","_options$maxValue","maxValue","storage","findPermutations","candidate","some","total","val","newCandidateA","concat","_toConsumableArray","newCandidateB","push","permutations","result","comb","sets","_ref","size","rec","filter","x","arrayUnique","map","a","sort","subsets","_ref3","r","s","rings","skills","complementaryCombinations","_ref6","threshold","resultPerSize","j","fill","_loop","_i3","sameArray","b","array","sortedArray","duplicatesIndex","includes","matchCombOtherDiceAtZero","_ref10","diceP","diceCount","combToP","addUpToTN","tn","_options$max","max","reverse","exactSuccess","_ref11","_options$compromised","compromised","_options$keptDiceCoun2","pR","pS","_ref4","_ref5","ringSkillCombinations","withLessDiceThanMax","_ref12","rDice","sDice","_ref13","fullCombs","_ref14","withOnlyRingDice","_ref15","_ref16","subresult","min","apply","cb","withOnlySkillDice","_ref17","_ref18","gruellingCases","_ref19","gruellingCombinations","addToGruellingCombinations","_ref20","_ref21","fullRingComb","fullSkillComb","_ref22","pRExactDefault","_ref24","opp","pRAtLeastDefault","_ref25","pRExactCompromised","_ref26","pRAtLeastCompromised","_ref27","pSExactDefault","_ref28","pSAtLeastDefault","_ref29","pSExactCompromised","_ref30","pSAtLeastCompromised","_ref31","zeroOnePermutations","_ref32","totalDiceCount","sorter","_ref34","_ref35","a1","success","b1","opportunity","a2","b2","coeff","_ref36","chances","_ref40","_ref40$opp","_ref40$options","_ref23","_ref23$options","_options$keptDiceCoun3","cumulativeSuccess","_options$compromised2","_options$keptDiceCoun4","pRAtLeast","pRExact","pSAtLeast","pSExact","_ref37","masks","baseCombs","oppPerms","perm","crossedCb","existingCb","combB","combA","every","_ref33","ringCombs","skillCombs","ringComb","skillComb","_ret","fullComb","_loop2","mask","_ref38","index","_ref39","ringDice","skillDice","successOppCombinations","_ref41","_ref42","_ref43","asyncChances","params","postMessage","type"],"sourceRoot":""}