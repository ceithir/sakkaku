{"version":3,"sources":["../webpack/bootstrap","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/l5r-ffg-probabilities/maths.js","features/probabilities/worker.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_arrayLikeToArray","arr","len","length","arr2","Array","_toConsumableArray","isArray","iter","iterator","from","minLen","toString","slice","constructor","test","TypeError","permutationsCount","list","distincts","forEach","factorial","values","reduce","acc","Error","pRDefault","Math","pow","pSDefault","pRCompromised","pSCompromised","ringSkillPermutations","ring","skill","keptDiceCount","combs","options","maxCardinality","maxValue","storage","findPermutations","candidate","some","total","val","newCandidateA","newCandidateB","push","permutations","result","comb","size","rec","filter","x","arrayUnique","map","a","sort","subsets","rings","skills","complementaryCombinations","threshold","resultPerSize","j","fill","sameArray","b","array","sortedArray","duplicatesIndex","includes","matchCombOtherDiceAtZero","diceP","diceCount","combToP","addUpToTN","tn","max","reverse","exactSuccess","compromised","pR","pS","ringSkillCombinations","withLessDiceThanMax","rDice","sDice","fullCombs","withOnlyRingDice","subresult","min","cb","withOnlySkillDice","gruellingCases","gruellingCombinations","addToGruellingCombinations","fullRingComb","fullSkillComb","pRExactDefault","opp","pRAtLeastDefault","pRExactCompromised","pRAtLeastCompromised","pSExactDefault","pSAtLeastDefault","pSExactCompromised","pSAtLeastCompromised","zeroOnePermutations","totalDiceCount","sorter","a1","success","b1","opportunity","a2","b2","coeff","chances","cumulativeSuccess","pRAtLeast","pRExact","pSAtLeast","pSExact","masks","baseCombs","oppPerms","perm","crossedCb","existingCb","combB","combA","every","ringCombs","skillCombs","ringComb","skillComb","fullComb","mask","index","ringDice","skillDice","successOppCombinations","asyncChances","params","postMessage","type"],"mappings":"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","file":"ce4bdc57347738fa8ca2.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/react/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","/**\n * Mathematical concepts:\n * https://en.wikipedia.org/wiki/Combination\n * https://en.wikipedia.org/wiki/Permutation\n * https://en.wikipedia.org/wiki/Geometric_progression\n */\n\n/**\n * Known issues:\n * - Probabilities were checked for consistency in the generic case against the empirical results from https://l5r-dice-sim.vercel.app/ so any bias from this one is also reflected there\n * - Nothing has been done to avoid rounding errors piling up\n * - The maths are done as if the dice exploded before being chosen to be kept\n */\n\nexport const permutationsCount = (list) => {\n  let distincts = {};\n  list.forEach((value) => {\n    if (distincts[value]) {\n      distincts[value] += 1;\n    } else {\n      distincts[value] = 1;\n    }\n  });\n\n  return (\n    factorial(list.length) /\n    Object.values(distincts).reduce((acc, value) => {\n      return acc * factorial(value);\n    }, 1)\n  );\n};\n\nconst factorial = (n) => {\n  if (n < 0) {\n    throw new Error(\"n must be >= 0\");\n  }\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/**\n * Chances to get _exactly_ n success out of a given ring die\n */\nexport const pRDefault = (n) => {\n  if (n === 0) {\n    return 1 / 2;\n  }\n\n  return Math.pow(1 / 6, n - 1) * (1 / 3 + (1 / 6) * (1 / 2));\n};\n\n/**\n * Chances to get _exactly_ n success out of a given skill die\n */\nexport const pSDefault = (n) => {\n  if (n === 0) {\n    return 5 / 12;\n  }\n\n  return Math.pow(1 / 6, n - 1) * (5 / 12 + (1 / 6) * (5 / 12));\n};\n\n/**\n * Chances to get _exactly_ n success out of a given ring die while compromised\n */\nexport const pRCompromised = (n) => {\n  if (n === 0) {\n    return 5 / 6;\n  }\n  if (n === 1) {\n    return 1 / 6;\n  }\n  return 0;\n};\n\n/**\n * Chances to get _exactly_ n success out of a given skill die while compromised\n */\nexport const pSCompromised = (n) => {\n  if (n === 0) {\n    return 2 / 3;\n  }\n  return Math.pow(1 / 12, n - 1) * (1 / 4 + (1 / 12) * (2 / 3));\n};\n\n/**\n * List all permutations of non-zero positive integers that sum up to n\n * Example:\n * n=4 -> [\n      [1, 1, 1, 1],\n      [1, 1, 2],\n      [1, 2, 1],\n      [1, 3],\n      [2, 1, 1],\n      [2, 2],\n      [3, 1],\n      [4],\n    ]\n */\nexport const permutations = (n, options = {}) => {\n  const { maxCardinality = null, maxValue = null } = options;\n\n  let storage = [];\n\n  const findPermutations = (candidate) => {\n    if (maxCardinality !== null && candidate.length > maxCardinality) {\n      return;\n    }\n    if (maxValue !== null && candidate.some((value) => value > maxValue)) {\n      return;\n    }\n\n    const total = candidate.reduce((acc, val) => acc + val, 0);\n    if (total < n) {\n      const newCandidateA = [...candidate, 1];\n      const newCandidateB = [...candidate];\n      newCandidateB[newCandidateB.length - 1] =\n        newCandidateB[newCandidateB.length - 1] + 1;\n      findPermutations(newCandidateA);\n      findPermutations(newCandidateB);\n    }\n    if (total === n) {\n      storage.push(candidate);\n    }\n  };\n\n  findPermutations([1]);\n  return storage;\n};\n\n/**\n * List all ways pick {size} dice out of a pool of {ring} ring dice and {skill} skill dice\n * Example:\n * ring=2, skill=3, size=3 -> [\n      { ring: 2, skill: 1 },\n      { ring: 1, skill: 2 },\n      { ring: 0, skill: 3 },\n    ]\n */\nexport const subsets = ({ ring, skill, size }) => {\n  if (size > ring.length + skill.length) {\n    throw new Error(\"Out of bounds\");\n  }\n  if (ring < 1) {\n    throw new Error(\"Not possible for a standard roll thus not implemented\");\n  }\n\n  let storage = [];\n  const rec = (candidate) => {\n    if (candidate.length < size) {\n      if (candidate.filter((x) => x === \"r\").length < ring) {\n        rec([...candidate, \"r\"]);\n      }\n      if (candidate.filter((x) => x === \"s\").length < skill) {\n        rec([...candidate, \"s\"]);\n      }\n    }\n    if (candidate.length === size) {\n      storage.push(candidate);\n    }\n  };\n  rec([]);\n\n  return arrayUnique(storage.map((a) => [...a].sort())).map((value) => {\n    const r = value.filter((x) => x === \"r\").length;\n    const s = value.filter((x) => x === \"s\").length;\n\n    return {\n      ring: r,\n      skill: s,\n    };\n  });\n};\n\n/**\n * List all permutations of {keptDiceCount} dice among a pool of {ring} ring dice plus {skill} skill dice summing up to n\n * Example:\n * ring=2, skill=3, n=5 -> [\n    { rings: [ 1, 4 ], skills: [] },\n    { rings: [ 1 ], skills: [ 4 ] },\n    { rings: [], skills: [ 1, 4 ] },\n    { rings: [ 2, 3 ], skills: [] },\n    { rings: [ 2 ], skills: [ 3 ] },\n    { rings: [], skills: [ 2, 3 ] },\n    { rings: [ 3, 2 ], skills: [] },\n    { rings: [ 3 ], skills: [ 2 ] },\n    { rings: [], skills: [ 3, 2 ] },\n    { rings: [ 4, 1 ], skills: [] },\n    { rings: [ 4 ], skills: [ 1 ] },\n    { rings: [], skills: [ 4, 1 ] },\n    { rings: [ 5 ], skills: [] },\n    { rings: [], skills: [ 5 ] }\n   ]\n */\nexport const ringSkillPermutations = ({\n  ring,\n  skill,\n  n,\n  keptDiceCount = ring,\n}) => {\n  const combs = permutations(n, { maxCardinality: keptDiceCount });\n\n  let result = [];\n  combs.forEach((comb) => {\n    const sets = subsets({ ring, skill, size: comb.length });\n    sets.forEach(({ ring: r, skill: s }) => {\n      let rings = new Array(r);\n      let skills = new Array(s);\n\n      for (let i = 0; i < r; i++) {\n        rings[i] = comb[i];\n      }\n      for (let i = 0; i < s; i++) {\n        skills[i] = comb[r + i];\n      }\n\n      result.push({ rings, skills });\n    });\n  });\n\n  return result;\n};\n\n/**\n * List all permutations of {keptDiceCount} dice among a pool of {ring} ring dice plus {skill} skill dice summing up to n\n * ring=2, skill=3, n=5 -> [\n      { rings: [1, 4], skills: [] },\n      { rings: [1], skills: [4] },\n      { rings: [], skills: [1, 4] },\n      { rings: [2, 3], skills: [] },\n      { rings: [2], skills: [3] },\n      { rings: [], skills: [2, 3] },\n      { rings: [3], skills: [2] },\n      { rings: [4], skills: [1] },\n      { rings: [5], skills: [] },\n      { rings: [], skills: [5] },\n    ]\n */\nexport const ringSkillCombinations = ({ ring, skill, n, keptDiceCount }) => {\n  const array = ringSkillPermutations({ ring, skill, n, keptDiceCount }).map(\n    ({ rings, skills }) => {\n      return { rings: rings.sort(), skills: skills.sort() };\n    }\n  );\n\n  let result = [];\n  let duplicatesIndex = [];\n  for (let i = 0; i < array.length; i++) {\n    if (duplicatesIndex.includes(i)) {\n      continue;\n    }\n    for (let j = i + 1; j < array.length; j++) {\n      if (\n        sameArray(array[i][\"rings\"], array[j][\"rings\"]) &&\n        sameArray(array[i][\"skills\"], array[j][\"skills\"])\n      ) {\n        duplicatesIndex.push(j);\n      }\n    }\n    result.push(array[i]);\n  }\n\n  return result;\n};\n\n/**\n * List all combinations between of {size} integers between 0 and {threshold}\n * threshold=2, size=2 -> [\n    [0, 0],\n    [0, 1],\n    [0, 2],\n    [1, 1],\n    [1, 2],\n    [2, 2],\n  ]\n *\n * See discussion on algorithm here: https://stackoverflow.com/questions/127704/algorithm-to-return-all-combinations-of-k-elements-from-n\n *\n * Note: size=0 will return [[]]\n */\nexport const complementaryCombinations = ({ threshold, size }) => {\n  let resultPerSize = {};\n\n  resultPerSize[1] = [];\n  for (let i = 1; i <= threshold; i++) {\n    resultPerSize[1].push([i]);\n  }\n\n  for (let s = 2; s <= size; s++) {\n    resultPerSize[s] = [];\n    for (let i = 1; i <= threshold; i++) {\n      for (let j = 0; j < resultPerSize[s - 1].length; j++) {\n        if (resultPerSize[s - 1][j][0] < i) {\n          continue;\n        }\n        resultPerSize[s].push([i, ...resultPerSize[s - 1][j]]);\n      }\n    }\n  }\n\n  let result = [new Array(size).fill(0)];\n  for (let i = 1; i <= size; i++) {\n    resultPerSize[i].forEach((r) => {\n      result.push([...new Array(size - i).fill(0), ...r]);\n    });\n  }\n\n  return result;\n};\n\n/**\n * As the name suggests, list all possible permutations\n * Not used by the the algorithm, just there for testing/debugging\n */\nexport const bruteForcePermutations = ({ ring, skill, tn, options = {} }) => {\n  const { keptDiceCount = ring } = options;\n  let allCombs = [];\n\n  const base = tn + 1;\n  for (let i = 0; i < Math.pow(tn + 1, ring + skill); i++) {\n    let tmp = [];\n    let quotient = Math.floor(i / base);\n    let remainder = i % base;\n    tmp.push(remainder);\n\n    while (quotient > 0) {\n      const n = quotient;\n      quotient = Math.floor(n / base);\n      remainder = n % base;\n      tmp.push(remainder);\n    }\n    for (let j = tmp.length; j < ring + skill; j++) {\n      tmp.push(0);\n    }\n    allCombs.push(tmp.reverse());\n  }\n\n  return allCombs.filter(\n    (comb) =>\n      [...comb]\n        .sort()\n        .reverse()\n        .slice(0, keptDiceCount)\n        .reduce((acc, val) => acc + val, 0) === tn\n  );\n};\n\nconst bruteForceExact = ({ ring, skill, tn, options }) => {\n  return bruteForcePermutations({ ring, skill, tn, options }).reduce(\n    (acc, permutation) => {\n      return (\n        acc +\n        permutation.slice(0, ring).reduce((acc, n) => acc * pRDefault(n), 1) *\n          permutation.slice(ring).reduce((acc, n) => acc * pSDefault(n), 1)\n      );\n    },\n    0\n  );\n};\n\nexport const bruteForceChances = ({ ring, skill, tn, options = {} }) => {\n  let result = 1;\n\n  for (let i = 0; i < tn; i++) {\n    result -= bruteForceExact({ ring, skill, tn: i, options });\n  }\n\n  return result;\n};\n\nconst sameArray = (a, b) => {\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst arrayUnique = (array) => {\n  const sortedArray = [...array].map((a) => a.sort());\n\n  let result = [];\n  let duplicatesIndex = [];\n\n  for (let i = 0; i < sortedArray.length; i++) {\n    if (duplicatesIndex.includes(i)) {\n      continue;\n    }\n\n    for (let j = i + 1; j < array.length; j++) {\n      if (sameArray(sortedArray[i], sortedArray[j])) {\n        duplicatesIndex.push(j);\n      }\n    }\n\n    result.push(sortedArray[i]);\n  }\n\n  return result;\n};\n\nconst matchCombOtherDiceAtZero = ({ comb, diceP, diceCount }) => {\n  if (comb.length > diceCount) {\n    return 0;\n  }\n\n  let result = 1;\n  comb.forEach((x) => {\n    result *= diceP(x);\n  });\n  result *= Math.pow(diceP(0), diceCount - comb.length);\n  result *= permutationsCount([\n    ...comb,\n    ...new Array(diceCount - comb.length).fill(0),\n  ]);\n\n  return result;\n};\n\nconst combToP = (comb, diceP) => {\n  return comb.reduce((acc, x) => acc * diceP(x), 1);\n};\n\nconst addUpToTN = (comb, tn, options = {}) => {\n  const { max = null } = options;\n\n  if (max === null) {\n    return comb.reduce((acc, x) => acc + x, 0) >= tn;\n  }\n\n  return (\n    [...comb]\n      .sort()\n      .reverse()\n      .slice(0, max)\n      .reduce((acc, x) => acc + x, 0) >= tn\n  );\n};\n\n/**\n * Chances to _exactly_ match the TN out of a given roll assuming a \"always pick highest\" strategy\n *\n * General algorithm:\n * 1. List all combinations summing up to that TN\n * 2. Determine the probability of each happening\n * 3. Sum them all\n *\n * FIXME: With a high TN, a high number of dice rolled, and a low number of dice kept, performances are mediocre\n */\nconst exactSuccess = ({ ring, skill, tn, options }) => {\n  const { compromised = false, keptDiceCount = ring } = options;\n  const pR = compromised ? pRCompromised : pRDefault;\n  const pS = compromised ? pSCompromised : pSDefault;\n\n  if (tn === 0) {\n    return Math.pow(pR(0), ring) * Math.pow(pS(0), skill);\n  }\n\n  const combs = ringSkillCombinations({ ring, skill, n: tn, keptDiceCount });\n  // Case: Any combination summing up to the TN with less dice than the max that can be kept\n  // All other dice must therefore be at zero or the total would be above TN\n  const withLessDiceThanMax = combs\n    .filter(\n      ({ rings: rDice, skills: sDice }) =>\n        rDice.length + sDice.length < keptDiceCount\n    )\n    .reduce((acc, { rings: rDice, skills: sDice }) => {\n      return (\n        acc +\n        matchCombOtherDiceAtZero({\n          comb: rDice,\n          diceP: pR,\n          diceCount: ring,\n        }) *\n          matchCombOtherDiceAtZero({\n            comb: sDice,\n            diceP: pS,\n            diceCount: skill,\n          })\n      );\n    }, 0);\n\n  const fullCombs = combs.filter(\n    ({ rings: rDice, skills: sDice }) =>\n      rDice.length + sDice.length === keptDiceCount\n  );\n\n  // Case: keptDiceCount ring dice add up exactly to TN\n  // Skill dice can have any value as long as it's equal or lower to the lowest ring die\n  const withOnlyRingDice = fullCombs\n    .filter(({ skills: sDice }) => sDice.length === 0) // <=> rDice.length === keptDiceCount\n    .reduce((acc, { rings: rDice }) => {\n      let subresult = 1;\n      subresult *= combToP(rDice, pR);\n      subresult *= permutationsCount(rDice);\n\n      subresult *= complementaryCombinations({\n        threshold: Math.min(...rDice),\n        size: skill,\n      }).reduce((acc, cb) => {\n        return acc + combToP(cb, pS) * permutationsCount(cb);\n      }, 0);\n\n      return acc + subresult;\n    }, 0);\n\n  // Case:\n  // 1. keptDiceCount skill dice exactly add up to TN\n  // 2. It's not possible to achieve the TN with solely ring dice (to avoid falling back into the previous case)\n  const withOnlySkillDice = fullCombs\n    .filter(({ rings: rDice }) => rDice.length === 0) // <=> sDice.length === keptDiceCount\n    .reduce((acc, { skills: sDice }) => {\n      let subresult = 1;\n      subresult *= complementaryCombinations({\n        threshold: Math.min(...sDice),\n        size: ring,\n      })\n        .filter((cb) => !addUpToTN(cb, tn))\n        .reduce((acc, cb) => {\n          return acc + combToP(cb, pR) * permutationsCount(cb);\n        }, 0);\n\n      subresult *= combToP(sDice, pS);\n      subresult *= complementaryCombinations({\n        threshold: Math.min(...sDice),\n        size: skill - sDice.length,\n      }).reduce((acc, cb) => {\n        return acc + combToP(cb, pS) * permutationsCount([...sDice, ...cb]);\n      }, 0);\n\n      return acc + subresult;\n    }, 0);\n\n  // Case: Achieving the TN _requires_ mixing both dice\n  const gruellingCases = fullCombs.filter(\n    ({ rings: rDice, skills: sDice }) => rDice.length > 0 && sDice.length > 0\n  );\n  // No more tricks there, we just compute the \"supposedly small\" list of all these combinations\n  let gruellingCombinations = [];\n  const addToGruellingCombinations = (comb) => {\n    if (\n      gruellingCombinations.some(\n        ({ rings, skills }) =>\n          sameArray([...rings].sort(), [...comb[\"rings\"]].sort()) &&\n          sameArray([...skills].sort(), [...comb[\"skills\"]].sort())\n      )\n    ) {\n      return;\n    }\n    gruellingCombinations.push(comb);\n  };\n  gruellingCases.forEach(({ rings: rDice, skills: sDice }) => {\n    const threshold = Math.min(...rDice, ...sDice);\n\n    const fullRingCombs = complementaryCombinations({\n      threshold,\n      size: ring - rDice.length,\n    }).map((cb) => [...rDice, ...cb]);\n\n    fullRingCombs\n      .filter((fullRingComb) => {\n        return !addUpToTN(fullRingComb, tn);\n      })\n      .forEach((fullRingComb) => {\n        if (skill === sDice.length) {\n          return addToGruellingCombinations({\n            rings: fullRingComb,\n            skills: sDice,\n          });\n        }\n\n        complementaryCombinations({\n          threshold,\n          size: skill - sDice.length,\n        })\n          .map((cb) => [...sDice, ...cb])\n          .filter((fullSkillComb) => {\n            return !addUpToTN(fullSkillComb, tn, { max: keptDiceCount });\n          })\n          .forEach((fullSkillComb) => {\n            addToGruellingCombinations({\n              rings: fullRingComb,\n              skills: fullSkillComb,\n            });\n          });\n      });\n  });\n\n  const withBothRingAndSkillDice = gruellingCombinations.reduce(\n    (acc, { rings: fullRingComb, skills: fullSkillComb }) => {\n      return (\n        acc +\n        combToP(fullRingComb, pR) *\n          permutationsCount(fullRingComb) *\n          combToP(fullSkillComb, pS) *\n          permutationsCount(fullSkillComb)\n      );\n    },\n    0\n  );\n\n  return (\n    withLessDiceThanMax +\n    withOnlyRingDice +\n    withOnlySkillDice +\n    withBothRingAndSkillDice\n  );\n};\n\n/**\n * Chances to _at least_ match the tn out of a given roll\n */\nexport const cumulativeSuccess = ({ ring, skill, tn, options = {} }) => {\n  const { keptDiceCount = ring } = options;\n\n  if (keptDiceCount <= 0) {\n    return tn <= 0 ? 1 : 0;\n  }\n  if (keptDiceCount > ring + skill) {\n    throw new Error(\"Cannot keep more dice than available\");\n  }\n  if (keptDiceCount < ring) {\n    throw new Error(\"Not implemented\");\n  }\n\n  let result = 1;\n  for (let i = 0; i < tn; i++) {\n    result -= exactSuccess({ ring, skill, tn: i, options });\n  }\n  return result;\n};\n\n/**\n * Changes to get _exactly_ {n} success and exactly {opp} on a given ring die\n */\nconst pRExactDefault = ({ n, opp }) => {\n  if (opp > 1) {\n    return 0;\n  }\n\n  if (n === 0) {\n    return opp === 1 ? 1 / 3 : 1 / 6;\n  }\n\n  if (opp === 0) {\n    return Math.pow(1 / 6, n - 1) * (1 / 3 + (1 / 6) * (1 / 6));\n  }\n\n  return Math.pow(1 / 6, n) * (1 / 3);\n};\n\n/**\n * Chance to end on an opportunity (regardless of the number of success) on a given ring die\n * I.e. the result of the infinite geometric series 1/3+(1/6)*1/3+(1/6)^2*1/3...\n */\nconst pROppDefault = () => {\n  return 2 / 5;\n};\n\n/**\n * Changes to get _at least_ {n} success and exactly {opp} on a given ring die\n */\nconst pRAtLeastDefault = ({ n, opp }) => {\n  if (opp > 1) {\n    return 0;\n  }\n\n  if (opp === 1) {\n    return Math.pow(1 / 6, n) * pROppDefault();\n  }\n\n  // opp === 0\n\n  if (n === 0) {\n    return 1 - pROppDefault();\n  }\n\n  return Math.pow(1 / 6, n - 1) * (1 / 3 + (1 / 6) * (1 - pROppDefault()));\n};\n\nconst pRExactCompromised = ({ n, opp }) => {\n  if (opp === 0 && n === 0) {\n    return 2 / 3;\n  }\n\n  if (opp === 1 && n === 0) {\n    return 1 / 6;\n  }\n\n  if (opp === 0 && n === 1) {\n    return 1 / 6;\n  }\n\n  return 0;\n};\n\nconst pRAtLeastCompromised = ({ n, opp }) => {\n  if (opp === 0 && n === 0) {\n    return 5 / 6;\n  }\n\n  if (opp === 1 && n === 0) {\n    return 1 / 6;\n  }\n\n  if (opp === 0 && n === 1) {\n    return 1 / 6;\n  }\n\n  return 0;\n};\n\n/**\n * Changes to get _exactly_ {n} success and exactly {opp} on a given skill die\n */\nconst pSExactDefault = ({ n, opp }) => {\n  if (opp > 1) {\n    return 0;\n  }\n\n  if (n === 0) {\n    return opp === 1 ? 1 / 4 : 1 / 6;\n  }\n\n  if (opp === 0) {\n    return Math.pow(1 / 6, n - 1) * (1 / 3 + (1 / 6) * (1 / 6));\n  }\n\n  return Math.pow(1 / 6, n - 1) * (1 / 12 + (1 / 6) * (1 / 4));\n};\n\n/**\n * Chance to end on an opportunity (regardless of the number of success) on a given skill die\n * I.e. the result of the infinite geometric series 1/3+(1/6)*1/3+(1/6)^2*1/3...\n */\nconst pSOppDefault = () => {\n  return 2 / 5;\n};\n\n/**\n * Changes to get _at least_ {n} success and exactly {opp} on a given skill die\n */\nconst pSAtLeastDefault = ({ n, opp }) => {\n  if (opp > 1) {\n    return 0;\n  }\n\n  if (opp === 1) {\n    return Math.pow(1 / 6, n - 1) * (1 / 12 + (1 / 6) * pSOppDefault());\n  }\n\n  // opp === 0\n\n  if (n === 0) {\n    return 1 - pROppDefault();\n  }\n\n  return Math.pow(1 / 6, n - 1) * (1 / 3 + (1 / 6) * (1 - pSOppDefault()));\n};\n\nconst pSExactCompromised = ({ n, opp }) => {\n  if (opp > 1) {\n    return 0;\n  }\n\n  if (n === 0) {\n    return opp === 1 ? 1 / 4 : 1 / 6;\n  }\n\n  if (opp === 0) {\n    return Math.pow(1 / 12, n - 1) * (1 / 6 + (1 / 12) * (5 / 12));\n  }\n\n  return Math.pow(1 / 12, n - 1) * (1 / 12 + (1 / 12) * (1 / 4));\n};\n\n/**\n * (1/3)+(1/12)*(1/3)+(1/12)^2*(1/3)...\n */\nconst pSOppCompromised = () => {\n  return 4 / 11;\n};\n\nconst pSAtLeastCompromised = ({ n, opp }) => {\n  if (opp > 1) {\n    return 0;\n  }\n\n  if (opp === 1) {\n    return Math.pow(1 / 12, n - 1) * (1 / 12 + (1 / 12) * pSOppCompromised());\n  }\n\n  // opp === 0\n\n  if (n === 0) {\n    return 1 - pSOppCompromised();\n  }\n\n  return (\n    Math.pow(1 / 12, n - 1) * (1 / 6 + (1 / 12) * (1 - pSOppCompromised()))\n  );\n};\n\nconst zeroOnePermutations = ({ totalDiceCount, min, max }) => {\n  let storage = [];\n\n  const findPermutations = (candidate) => {\n    if (candidate.length > totalDiceCount) {\n      return;\n    }\n    if (candidate.some((value) => value > 1)) {\n      return;\n    }\n    if (candidate.length === totalDiceCount) {\n      const total = candidate.reduce((acc, val) => acc + val, 0);\n      if (total >= min && (!max || total <= max)) {\n        storage.push(candidate);\n      }\n    }\n\n    const newCandidateA = [...candidate, 0];\n    const newCandidateB = [...candidate];\n    newCandidateB[newCandidateB.length - 1] =\n      newCandidateB[newCandidateB.length - 1] + 1;\n    findPermutations(newCandidateA);\n    findPermutations(newCandidateB);\n  };\n\n  findPermutations([0]);\n  return storage;\n};\n\nconst sameSuccessOppComb = (combA, combB) => {\n  if (combA.length !== combB.length) {\n    return false;\n  }\n\n  return combA.every(({ success, opportunity }, i) => {\n    return (\n      combB[i][\"success\"] === success && combB[i][\"opportunity\"] === opportunity\n    );\n  });\n};\n\nconst sorter = (\n  { success: a1, opportunity: b1 },\n  { success: a2, opportunity: b2 }\n) => {\n  return a2 - a1 || b2 - b1;\n};\n\nconst coeff = (cb) =>\n  permutationsCount(\n    cb.map(({ success, opportunity }) => {\n      return `${success}-${opportunity}`;\n    })\n  );\n\n// FIXME More or less a brute force algorithm with abysmal complexity\nconst successOppCombinations = ({ ring, skill, tn, keptDiceCount, opp }) => {\n  const masks = zeroOnePermutations({\n    totalDiceCount: ring + skill,\n    min: keptDiceCount,\n    max: keptDiceCount,\n  });\n\n  const baseCombs = (size) => {\n    if (size === 0) {\n      return [[]];\n    }\n\n    let combs = [];\n\n    const oppPerms = zeroOnePermutations({\n      totalDiceCount: size,\n      min: 0,\n    });\n\n    complementaryCombinations({\n      threshold: tn,\n      size,\n    }).forEach((cb) => {\n      oppPerms.forEach((perm) => {\n        let crossedCb = new Array(size);\n        for (let i = 0; i < size; i++) {\n          crossedCb[i] = { success: cb[i], opportunity: perm[i] };\n        }\n        crossedCb.sort(sorter);\n        if (\n          combs.some((existingCb) => {\n            return sameSuccessOppComb(existingCb, crossedCb);\n          })\n        ) {\n          return;\n        }\n        combs.push(crossedCb);\n      });\n    });\n\n    return combs;\n  };\n\n  const ringCombs = baseCombs(ring);\n  const skillCombs = baseCombs(skill);\n\n  let combs = [];\n\n  ringCombs.forEach((ringComb) => {\n    skillCombs.forEach((skillComb) => {\n      const fullComb = [...ringComb, ...skillComb];\n\n      for (let i = 0; i < masks.length; i++) {\n        const mask = masks[i];\n\n        const totalSuccess = fullComb.reduce(\n          (acc, { success }, index) => acc + success * mask[index],\n          0\n        );\n        if (totalSuccess < tn) {\n          continue;\n        }\n        const totalOpp = fullComb.reduce(\n          (acc, { opportunity }, index) => acc + opportunity * mask[index],\n          0\n        );\n        if (totalOpp < opp) {\n          continue;\n        }\n        combs.push({ ringDice: ringComb, skillDice: skillComb });\n        break;\n      }\n    });\n  });\n\n  return combs;\n};\n\nexport const chances = ({ ring, skill, tn, opp = 0, options = {} }) => {\n  if (opp === 0) {\n    return cumulativeSuccess({ ring, skill, tn, options });\n  }\n\n  const { compromised = false, keptDiceCount = ring } = options;\n\n  if (opp > keptDiceCount) {\n    return 0;\n  }\n\n  const pRAtLeast = compromised ? pRAtLeastCompromised : pRAtLeastDefault;\n  const pRExact = compromised ? pRExactCompromised : pRExactDefault;\n  const pSAtLeast = compromised ? pSAtLeastCompromised : pSAtLeastDefault;\n  const pSExact = compromised ? pSExactCompromised : pSExactDefault;\n\n  return successOppCombinations({\n    ring,\n    skill,\n    tn,\n    keptDiceCount,\n    opp,\n  }).reduce((acc, { ringDice, skillDice }) => {\n    return (\n      acc +\n      coeff(ringDice) *\n        ringDice.reduce((acc, { success, opportunity }) => {\n          const current = () => {\n            if (success === tn) {\n              return pRAtLeast({ n: success, opp: opportunity });\n            }\n\n            return pRExact({ n: success, opp: opportunity });\n          };\n          return acc * current();\n        }, 1) *\n        coeff(skillDice) *\n        skillDice.reduce((acc, { success, opportunity }) => {\n          const current = () => {\n            if (success === tn) {\n              return pSAtLeast({ n: success, opp: opportunity });\n            }\n\n            return pSExact({ n: success, opp: opportunity });\n          };\n          return acc * current();\n        }, 1)\n    );\n  }, 0);\n};\n","import { chances } from \"l5r-ffg-probabilities\";\n\nexport const asyncChances = (params) => {\n  postMessage({ type: \"custom\", params, result: chances(params) });\n};\n"],"sourceRoot":""}